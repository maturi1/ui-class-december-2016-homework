GIT commands:
Git Init: 	 initialize a new git repository until we run this command inside a repository or directory, it’s   just a regular folder. 
Git Config:	 configure this is useful when git is setting up for the first time.
Git Help:   if we forget any commands we can use this command it will shows 21 most common     git   commands. 
Git Status: we can check the status of the repository to see which files are inside it, which changes need to be committed, which branch of repository currently looking for.
Git add:   it doesn’t add new files to the repository instead it brings new files to the gits attention.    git add
Git commit: takes all the changes written in index creates a new commit object pointing to it and sets the branch to point to that new commit. Examples: git commit -m ‘committing added changes’ git commit -a -m ‘committing all changes, equals to git add and git commit’.
Git clone: download the code for the first time from the repository.
                  git clone git@github.com:user/test.git
Git rm: Removes files from your index and your working directory so they will not be tracked. Example: git rm filename.
git branch
Lists existing branches, including remote branches if ‘-a’ is provided. Creates a new branch if a branch name is provided. Example: git branch -a * master remotes/origin/master
git checkout
Checks out a different branch – switches branches by updating the index, working tree, and HEAD to reflect the chosen branch. Example: git checkout newbranch
git merge
Merges one or more branches into your current branch and automatically creates a new commit if there are no conflicts. Example: git merge newbranchversion
git reset
Resets your index and working directory to the state of your last commit. Example: git reset --hard HEAD

git stash
Temporarily saves changes that you don’t want to commit immediately. You can apply the changes later. Example: git stash Saved working directory and index state "WIP on master: 84f241e first commit" HEAD is now at 84f241e first commit (To restore them type "git stash apply")
git tag
Tags a specific commit with a simple, human readable handle that never moves. Example: git tag -a v1.0 -m 'this is version 1.0 tag'
git fetch
Fetches all the objects from the remote repository that are not present in the local one. Example: git fetch origin
git pull
Fetches the files from the remote repository and merges it with your local one. This command is equal to the git fetch and the git merge sequence. Example: git pull origin
git push
Pushes all the modified local objects to the remote repository and advances its branches. Example: git push origin master
git remote
Shows all the remote versions of your repository. Example: git remote origin
git log
Shows a listing of commits on a branch including the corresponding details. Example: git log commit 84f241e8a0d768fb37ff7ad40e294b61a99a0abe Author: User <user@domain.com> Date: Mon May 3 09:24:05 2010 +0300 first commit
git show
Shows information about a git object. Example: git show commit 84f241e8a0d768fb37ff7ad40e294b61a99a0abe Author: User <user@domain.com> Date: Mon May 3 09:24:05 2010 +0300 first commit diff --git a/README b/README new file mode 100644 index 0000000..e69de29
git ls-tree
Shows a tree object, including the mode and the name of each item and the SHA-1 value of the blob or the tree that it points to. Example: git ls-tree master^{tree} 100644 blob e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 README
git cat-file
Used to view the type of an object through the SHA-1 value. Example: git cat-file -t e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 blob
git grep
Lets you search through your trees of content for words and phrases. Example: git grep "www.siteground.com" -- *.php
git diff
Generates patch files or statistics of differences between paths or files in your git repository, or your index or your working directory. Example: git diff
gitk
Graphical Tcl/Tk based interface to a local Git repository. Example: gitk
git archive
Creates a tar or zip file including the contents of a single tree from your repository. Example: git archive --format=zip master^ README >file.zip


